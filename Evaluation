import json
import numpy as np
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

def load_json(file_path):
    with open(file_path, 'r') as file:
        Dt = json.load(file)
    return Dt

def load_age_epochs(Data, Key_name):
    Age_Epochs = []
    for i in Data:
        Age_Epochs.append(i[Key_name])
    return Age_Epochs

def classes():
    classes = [
        '<1700', 
        '1700-1749', 
        '1750-1799', 
        '1800-1819',
        '1820-1839',
        '1840-1859',
        '1860-1879',
        '1880-1899',
        '1900-1919',
        '1920-1939',
        '1940-1959',
        '1960-1979',
        '1980-1999',
        '2000-2019',
        '>2020'
        ]
    return classes

def conf_matrix(ground_truth, pred_labels, classes, output_path):
    conf_matrix = confusion_matrix(ground_truth, pred_labels, labels=classes)
    conf_matrix = ( conf_matrix.astype(float) / conf_matrix.astype(float).sum(axis=1) )*100

    plt.figure(figsize=(10, 7))
    sns.heatmap(conf_matrix, annot=True, fmt=".0f", 
                cmap="Blues", xticklabels=classes, yticklabels=classes)
    plt.title('Confusion Matrix')
    plt.xlabel('Predicted Label')
    plt.ylabel('True Label')
    plt.savefig(output_path)

def adjusted_predictions_3(ground_truth, pred_labels, classes):
    adjusted_predictions = []
    for true_label, pred_label in zip(ground_truth, pred_labels):
        if pred_label == true_label:
            adjusted_predictions.append(pred_label)
        else:
            true_index = classes.index(true_label)
            if true_index > 0 and classes[true_index - 1] == pred_label:
                adjusted_predictions.append(true_label)
            elif true_index < len(classes) - 1 and classes[true_index + 1] == pred_label:
                adjusted_predictions.append(true_label)
            else:
                adjusted_predictions.append(pred_label)
    return adjusted_predictions

def adjusted_predictions_5(ground_truth, pred_labels, classes):
    adjusted_predictions = []
    for true_label, pred_label in zip(ground_truth, pred_labels):
        if pred_label == true_label:
            adjusted_predictions.append(pred_label)
        else:
            true_index = classes.index(true_label)
            # 检查是否为相邻类别，如果是，则调整为真实类别
            if true_index > 0 and classes[true_index - 1] == pred_label:
                adjusted_predictions.append(true_label)
            elif true_index > 1 and classes[true_index - 2] == pred_label:
                adjusted_predictions.append(true_label)
            elif true_index < len(classes) - 1 and classes[true_index + 1] == pred_label:
                adjusted_predictions.append(true_label)            
            elif true_index < len(classes) - 2 and classes[true_index + 2] == pred_label:
                adjusted_predictions.append(true_label)
            else:
                adjusted_predictions.append(pred_label)
    return adjusted_predictions

if __name__ == "__main__":
    true_data = load_json("./Building_Attribute.json")['Data']
    pred_result = load_json("./predicted_result.json")
    ground_truth = load_age_epochs(true_data, "Age Epoch")
    pred_labels = load_age_epochs(pred_result, "age")
    output_path_normal = './conf_matrix/cm_normal.png'
    output_path_3 = './conf_matrix/cm_3.png'
    output_path_5 = './conf_matrix/cm_5.png'

    conf_matrix(ground_truth, pred_labels, classes(), output_path_normal)
    conf_matrix(ground_truth, adjusted_predictions_3(ground_truth, pred_labels, classes()), classes(), output_path_3)
    conf_matrix(ground_truth, adjusted_predictions_5(ground_truth, pred_labels, classes()), classes(), output_path_5)
